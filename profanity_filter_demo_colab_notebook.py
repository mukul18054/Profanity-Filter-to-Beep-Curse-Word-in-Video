# -*- coding: utf-8 -*-
"""Profanity Filter demo colab notebook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AjBTw5XCZvwYX8ihf1LMPmS8gwYjFmCJ

### connecting to drive to read sample audio and beep audio
"""

from google.colab import drive
drive.mount('/content/drive')

cd drive/MyDrive/data

!ls

"""### installing whisperx for word by word time stamp sync while converting speech to text"""

!pip install git+https://github.com/m-bain/whisperx.git -q

"""### model used for converting speech to text, can be used to find timeframe of a sentence but not word by word, so used whisperx as well"""

! pip install git+https://github.com/openai/whisper.git -q

"""### English song with abusive words, word by word sync timestamp

Whisper can be used to convert any language audio to text, but whishperx doesn't support all the language now for syncing each word by word
whishperx currently support default models provided for {en, fr, de, es, it, ja, zh, nl, uk, pt}.

### here we are specifying the language using --language, it can also detect the language automatically.
it then convert audio to text.
sampleAudio.mp3 is our sample audio file which I've created using text to speech to add some cuss words in the audio.

In this case my audio doesn't had any noise, but for other audio sample, audio can be preprocessed to remove noises before doing speech to text for better accuracy.

this line uses whisper and whisperx model to saves output to sampleAudio.json file where it saves start and end time of each word.
"""

!whisperx sampleAudio.mp3 --model medium --language en --align_model WAV2VEC2_ASR_LARGE_LV60K_960H

# !whisperx songGerman.mp3 --model medium --language de --task translate

"""### sample audio file is made using text to speech.
Text is given below which contains cuss words.

woman you shouldn't complain about cleaning up your house.
You ever fuck a bitch and she start to cry?
she look like a tranny.
The shit you hear about me might be true or it might be faker than.
The shit just blows me claim you so faithful and down for somebody.
I can not just sit up and HATE on another bitch. I got too much shit going.
cause I'm tired of you big bitches coming for us skinny girls.
So hoes that smoke are losers ? " yea go on IG.
bad bitches is the only thing that i like.
i met that pussy on Ocean Dr . i gave that pussy a pill.
Fuck
The word f-u-c-k is one of the most widely recognized swear words in the English language. The literal f-word is a shortened version of: 'Fornication. Under the Consent of the King.' Like most swear words, it did originate from a sexual reference, which is still how it's used today.
2. Fuck you
Adding the word 'you' means you're directing the offense onto someone else.
3. Shit
Another meaning for shit is poo.
4. Piss off
If you want someone to step away from your personal space, you can simply tell them to piss off.
5. Dick head
You can visually imagine this swear word without too much effort I'm sure.
6. Asshole
This is one of those curse words that literally describes a part of our body.
7. Son of a bitch
A versatile word that can be used internally like the word 'damn' or 'shit' but can also be used to describe someone who tossed one over you.
8. Bastard
The literal translation for a bastard is an illegitimate child or mongrel. It's used‍
9. Bitch
A common word that's not only used globally but from both males and females. ‍
10. Damn
This is not the harshest swear word used in America.
11. Cunt
While this word is used in Britain and elsewhere.
12. Bollocks
Bollocks is another word for 'shit'.
13. Bugger
One of the most common words used by the British.
14. Bloody Hell
Out of all British swear words, this is probably the one that's quickly being used by Americans.
15. Choad
Choad is just another word for penis.
16. Crikey
Some may argue that this isn't a swear word.
17. Rubbish
Rubbish is what the British refers to as 'trash.'
18. Shag
To 'shag' means to have sex. ‍
19. Wanker
The word 'wank' means to masturbate.
20. Taking the piss
If someone from your team is being unproductive.
21. Twat
Twat is translated to 'pussy'.
22. Bloody Oath
Code for: 'Fuck Yeah!'
23. Root
What 'shag' is to the British,

### reading json data
"""

import json

# Assuming fileName contains the path of the JSON file
# For example: fileName = "/path/to/your/file.json"
fileName = 'sampleAudio.json'

def read_json_file(file_path):
    try:
        with open(file_path, "r") as file:
            data = json.load(file)
        return data
    except FileNotFoundError:
        print(f"Error: File '{file_path}' not found.")
        return None
    except json.JSONDecodeError:
        print(f"Error: Failed to parse JSON in file '{file_path}'.")
        return None

# Call the function to read the JSON data
data = read_json_file(fileName)

# Check if the data was successfully loaded
if data is not None:
    # You can now work with the JSON data as a Python dictionary or list
    print(data)

"""### profanity check
I'm using better profanily open source : https://pypi.org/project/better-profanity/

it can be use to find out the cuss words,
it can also be use to whitelist some cuss words which is normal for people these days.


Limitations: As the library compares each word by characters, the censor could easily be bypassed by adding any character(s) to the word
but as we are using whisperx for translating speech to text, it gives us valid words only.


Also we can use any other model for this, if it provide us better accuracy

"""

!pip install better_profanity

from better_profanity import profanity

"""### converting our json file
here cuss words are converted to "****"
"""

import re
# Function to remove punctuations and spaces from the word
def clean_word(word):
    return re.sub(r'[^\w\s]', '', word)

bad_word = set()
# Loop through each word in the JSON data
for segment in data["segments"]:
    for word_obj in segment["words"]:
        word = word_obj["word"]
        cleaned_word = clean_word(word.lower())  # Convert to lowercase and remove punctuations/spaces
        # if is_abusive(cleaned_word):
        #     word_obj["word"] = "****"
        word = profanity.censor(cleaned_word)
        if(word == "****"):
          word_obj["word"] = "****"
          bad_word.add(cleaned_word)
print(bad_word)
print(data)

"""### create audio (add beep sound for words == "****")

here we are adding beep sound by overlaying beep.mp3 on top of original_audio.mp3
we are making the original_audio silent for that particular time frame when that particular cuss word were spoken and adding beep sound in place of it.
"""

!pip install pydub -q

# Function to create a beep audio segment with a specified duration
def create_beep_audio(duration_ms):
    beep = AudioSegment.silent(duration=duration_ms)
    beep = beep.overlay(AudioSegment.from_file("beep.mp3"))
    return beep

from pydub import AudioSegment

# Assuming you have an audio file named "original_audio.mp3"
original_audio_path = "sampleAudio.mp3"
output_path = "original_audio_with_beep.mp3"
# Load the original audio file
original_audio = AudioSegment.from_file(original_audio_path)

# Define the output audio segment
output_audio = AudioSegment.empty()
# mute gain is used later to make original_audio silent while overlaying
mute_gain = float("-inf")

# Loop through each segment and add the corresponding audio to the output
for segment in data["segments"]:
    segment_start = int(segment["start"] * 1000)  # Convert start time to milliseconds
    segment_end = int(segment["end"] * 1000)  # Convert end time to milliseconds

    for word_obj in segment["words"]:
        word = word_obj["word"]
        # print(word_obj)
        # word_start= 0; word_end = 0
        try:
          word_start = int(word_obj["start"] * 1000)  # Convert word start time to milliseconds
          word_end = int(word_obj["end"] * 1000)  # Convert word end time to milliseconds
          # print(word_start, word_end)
        except:
          word_start = word_end
          word_end = word_start + 90
        if word == "****":
            # Calculate the duration of the word
            word_duration = word_end - word_start + 20 #20ms is extra
            # Create a beep audio segment with the same duration as the word
            beep_audio = create_beep_audio(word_duration)
            # Replace the original audio with the beep audio segment at the specified timestamp
            original_audio = original_audio.overlay(beep_audio, position=word_start-10, gain_during_overlay=mute_gain) #starting 10ms before curse word and ending 10ms later

"""### once we have the audio (cuss words are replaced with beep sound), then we can download the audio"""

# Save the modified original audio file with beep sounds
# Download the audio
from google.colab import files
original_audio.export(output_path, format="mp3")

# Download the modified original audio with beep sounds
files.download(output_path)
print("File downloaded")
print("Process complete")

